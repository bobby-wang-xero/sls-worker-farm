service: sls-order-worker

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-southeast-2
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${opt:stage, self:provider.stage, 'dev'}}

  deploymentBucket:
    name: logicplatypus-labs-serverless-deployments-${self:provider.stage}
    maxPreviousDeploymentArtifacts: 2
  tags: # tags will be applied to all resources
    logic-platypus:project: event-driven-architecture-demo
    logic-platypus:env: ${self:provider.stage}
  stackTags: # tags will be applied to cloudformation
    logic-platypus:project: event-driven-architecture-demo
    logic-platypus:env: ${self:provider.stage}
  iamRoleStatements: # set permissions for all functions
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:*

custom:
  defaultStage: dev
  profiles:
    dev: serverless-admin
    prod: serverless-admin
  description: order service, CRUD

package:
  exclude:
    - ./**
    - '!dist/**'
    - '!node_modules/**'

functions:
  worker:
    handler: dist/index.worker
    name: ${opt:stage, self:custom.defaultStage}-sls-order-worker
    description: ${self:custom.description}
    memorySize: 512 # default value is 1024
    environment:
      ENVIRONMENT: ${self:provider.stage}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - InputQueue
              - Arn

resources: # CloudFormation template syntax
  Resources:
    OrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: orderTable
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    InputQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${opt:stage, self:custom.defaultStage}-order-input-queue
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - DeadLetterQueue
              - Arn
          maxReceiveCount: 5
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-${self:service}-dead-letters
    Topic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${opt:stage, self:custom.defaultStage}-order-topic

    SubScription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint:
          Fn::GetAtt:
            - InputQueue
            - Arn
        FilterPolicy:
          EventType: # this is a self-defined value from the SNS topic's messageAttributes, see: SNS.Types.PublishInput
            - OrderRequested
        Protocol: sqs
        TopicArn: !Ref Topic

    OrderTopicToInputQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "AllowSNSPublishStatement"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - InputQueue
                - Arn
              Action:
                - "SQS:SendMessage"
                - "SQS:ReceiveMessage"
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref Topic
        Queues:
          - Ref: InputQueue
